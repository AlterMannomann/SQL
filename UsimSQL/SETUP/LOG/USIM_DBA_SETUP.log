SQL> -- get system information roughly formatted
SQL> @@../UTIL/SYSTEM_INFO.sql
SQL> SELECT TO_CHAR(SYSDATE, 'DD.MM.YYYY HH24:MI:SS') AS exec_date
  2       , SUBSTR(SYS_CONTEXT('USERENV', 'DB_NAME'), 1, 30) AS db_name
  3       , SUBSTR(SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA'), 1, 30) AS db_schema
  4       , SUBSTR(SYS_CONTEXT('USERENV', 'OS_USER'), 1, 60) AS os_user
  5    FROM dual
  6  ;

EXEC_DATE           DB_NAME                        DB_SCHEMA                      OS_USER
------------------- ------------------------------ ------------------------------ ------------------------------------------------------------
09.06.2024 21:55:14 FREEPDB1                       SYS                            Adi

1 Zeile ausgewählt.

SQL> -- get parameter to use - can be skipped with ok for objects that exist already
SQL> ACCEPT USIM_SCRIPTS CHAR DEFAULT '/opt/oracle/USIM' PROMPT 'Main directory for script files (a valid server directory like C:\Users\xxx\Documents\SQL\UsimSQL or /opt/oracle/USIM - the default):'
SQL> ACCEPT USER_OS CHAR DEFAULT 'oracle' PROMPT 'OS username for DB server (default ORACLE): '
SQL> ACCEPT PASS_OS CHAR DEFAULT 'oracle' PROMPT 'OS password for DB server (default oracle): '
SQL> ACCEPT PASS_USIM CHAR DEFAULT 'usim' PROMPT 'Password for user USIM (default usim): '
SQL> ACCEPT PASS_USIM_TEST CHAR DEFAULT 'usim' PROMPT 'Password for user USIM_TEST (default usim): '
SQL> COLUMN USIM_TERMINATOR NEW_VAL USIM_TERMINATOR
SQL> SELECT CASE
  2           WHEN INSTR('&USIM_SCRIPTS', ':') > 0
  3           THEN '\'
  4           ELSE '/'
  5         END AS USIM_TERMINATOR
  6    FROM dual
  7  ;
alt:SELECT CASE
         WHEN INSTR('&USIM_SCRIPTS', ':') > 0
         THEN '\'
         ELSE '/'
       END AS USIM_TERMINATOR
  FROM dual

neu:SELECT CASE
         WHEN INSTR('/opt/oracle/USIM', ':') > 0
         THEN '\'
         ELSE '/'
       END AS USIM_TERMINATOR
  FROM dual

U
-
/

1 Zeile ausgewählt.

SQL> COLUMN USIM_DIRECTORY NEW_VAL USIM_DIRECTORY
SQL> COLUMN USIM_HISTORY NEW_VAL USIM_HISTORY
SQL> COLUMN USIM_SETUP NEW_VAL USIM_SETUP
SQL> COLUMN USIM_SHELL NEW_VAL USIM_SHELL
SQL> COLUMN USIM_LOGS NEW_VAL USIM_LOGS
SQL> COLUMN USIM_TESTS NEW_VAL USIM_TESTS
SQL> SELECT '&USIM_SCRIPTS.&USIM_TERMINATOR.JS' AS USIM_DIRECTORY
  2       , '&USIM_SCRIPTS.&USIM_TERMINATOR.JS&USIM_TERMINATOR.SpaceLog' AS USIM_HISTORY
  3       , '&USIM_SCRIPTS.&USIM_TERMINATOR.SETUP' AS USIM_SETUP
  4       , '&USIM_SCRIPTS.&USIM_TERMINATOR.SH' AS USIM_SHELL
  5       , '&USIM_SCRIPTS.&USIM_TERMINATOR.SETUP&USIM_TERMINATOR.LOG' AS USIM_LOGS
  6       , '&USIM_SCRIPTS.&USIM_TERMINATOR.TESTING' AS USIM_TESTS
  7    FROM dual
  8  ;
alt:SELECT '&USIM_SCRIPTS.&USIM_TERMINATOR.JS' AS USIM_DIRECTORY
     , '&USIM_SCRIPTS.&USIM_TERMINATOR.JS&USIM_TERMINATOR.SpaceLog' AS USIM_HISTORY
     , '&USIM_SCRIPTS.&USIM_TERMINATOR.SETUP' AS USIM_SETUP
     , '&USIM_SCRIPTS.&USIM_TERMINATOR.SH' AS USIM_SHELL
     , '&USIM_SCRIPTS.&USIM_TERMINATOR.SETUP&USIM_TERMINATOR.LOG' AS USIM_LOGS
     , '&USIM_SCRIPTS.&USIM_TERMINATOR.TESTING' AS USIM_TESTS
  FROM dual

neu:SELECT '/opt/oracle/USIM/JS' AS USIM_DIRECTORY
     , '/opt/oracle/USIM/JS/SpaceLog' AS USIM_HISTORY
     , '/opt/oracle/USIM/SETUP' AS USIM_SETUP
     , '/opt/oracle/USIM/SH' AS USIM_SHELL
     , '/opt/oracle/USIM/SETUP/LOG' AS USIM_LOGS
     , '/opt/oracle/USIM/TESTING' AS USIM_TESTS
  FROM dual

USIM_DIRECTORY      USIM_HISTORY                 USIM_SETUP             USIM_SHELL          USIM_LOGS                  USIM_TESTS
------------------- ---------------------------- ---------------------- ------------------- -------------------------- ------------------------
/opt/oracle/USIM/JS /opt/oracle/USIM/JS/SpaceLog /opt/oracle/USIM/SETUP /opt/oracle/USIM/SH /opt/oracle/USIM/SETUP/LOG /opt/oracle/USIM/TESTING

1 Zeile ausgewählt.

SQL> COLUMN CONFIG_INFO NEW_VAL CONFIG_INFO
SQL> SELECT 'Current configuration' || CHR(13) || CHR(10) ||
  2         'Main directory: &USIM_SCRIPTS' || CHR(13) || CHR(10) ||
  3         'Space log directory: &USIM_DIRECTORY' || CHR(13) || CHR(10) ||
  4         'History log directory: &USIM_HISTORY' || CHR(13) || CHR(10) ||
  5         'Install logfile directory: &USIM_LOGS' || CHR(13) || CHR(10) ||
  6         'Testing directory: &USIM_TESTS' || CHR(13) || CHR(10) ||
  7         'Shell script directory: &USIM_SHELL' || CHR(13) || CHR(10) ||
  8         'Server user: &USER_OS' || CHR(13) || CHR(10) ||
  9         'Server user password: &PASS_OS' || CHR(13) || CHR(10) ||
 10         'USIM password: &PASS_USIM' || CHR(13) || CHR(10) ||
 11         'USIM_TEST password: &PASS_USIM_TEST' || CHR(13) ||  CHR(10) || CHR(13) || CHR(10) ||
 12         'Remark: If you care about security this is the wrong application for you. Press Yes to install or No to cancel.' AS CONFIG_INFO
 13    FROM dual
 14  ;
alt:SELECT 'Current configuration' || CHR(13) || CHR(10) ||
       'Main directory: &USIM_SCRIPTS' || CHR(13) || CHR(10) ||
       'Space log directory: &USIM_DIRECTORY' || CHR(13) || CHR(10) ||
       'History log directory: &USIM_HISTORY' || CHR(13) || CHR(10) ||
       'Install logfile directory: &USIM_LOGS' || CHR(13) || CHR(10) ||
       'Testing directory: &USIM_TESTS' || CHR(13) || CHR(10) ||
       'Shell script directory: &USIM_SHELL' || CHR(13) || CHR(10) ||
       'Server user: &USER_OS' || CHR(13) || CHR(10) ||
       'Server user password: &PASS_OS' || CHR(13) || CHR(10) ||
       'USIM password: &PASS_USIM' || CHR(13) || CHR(10) ||
       'USIM_TEST password: &PASS_USIM_TEST' || CHR(13) ||  CHR(10) || CHR(13) || CHR(10) ||
       'Remark: If you care about security this is the wrong application for you. Press Yes to install or No to cancel.' AS CONFIG_INFO
  FROM dual

neu:SELECT 'Current configuration' || CHR(13) || CHR(10) ||
       'Main directory: /opt/oracle/USIM' || CHR(13) || CHR(10) ||
       'Space log directory: /opt/oracle/USIM/JS' || CHR(13) || CHR(10) ||
       'History log directory: /opt/oracle/USIM/JS/SpaceLog' || CHR(13) || CHR(10) ||
       'Install logfile directory: /opt/oracle/USIM/SETUP/LOG' || CHR(13) || CHR(10) ||
       'Testing directory: /opt/oracle/USIM/TESTING' || CHR(13) || CHR(10) ||
       'Shell script directory: /opt/oracle/USIM/SH' || CHR(13) || CHR(10) ||
       'Server user: oracle' || CHR(13) || CHR(10) ||
       'Server user password: oracle' || CHR(13) || CHR(10) ||
       'USIM password: usim' || CHR(13) || CHR(10) ||
       'USIM_TEST password: usim' || CHR(13) ||  CHR(10) || CHR(13) || CHR(10) ||
       'Remark: If you care about security this is the wrong application for you. Press Yes to install or No to cancel.' AS CONFIG_INFO
  FROM dual

CONFIG_INFO

Current configuration
Main directory: /opt/oracle/USIM
Space log directory: /opt/oracle/USIM/JS
History log directory: /opt/oracle/USIM/JS/SpaceLog
Install logfile directory: /opt/oracle/USIM/SETUP/LOG
Testing directory: /opt/oracle/USIM/TESTING
Shell script directory: /opt/oracle/USIM/SH
Server user: oracle
Server user password: oracle
USIM password: usim
USIM_TEST password: usim

Remark: If you care about security this is the wrong application for you. Press Yes to install or No to cancel.


1 Zeile ausgewählt.

SQL> PAUSE &CONFIG_INFO
SQL> -- CREATE TABLESPACES
SQL> SELECT 'CREATE USIM tablespaces' AS info FROM dual;

INFO
-----------------------
CREATE USIM tablespaces

1 Zeile ausgewählt.

SQL> -- USIM_LIVE
SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN 'USIM_CREATE_TBL_SPC.sql'
  4           ELSE '../UTIL/NOTHING_TO_DO.sql "Tablespace USIM_LIVE already exists."'
  5         END AS SCRIPTFILE
  6    FROM dba_tablespaces
  7   WHERE tablespace_name = 'USIM_LIVE'
  8  ;

SCRIPTFILE
----------------------------------------------------------------
USIM_CREATE_TBL_SPC.sql

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> CREATE BIGFILE TABLESPACE usim_live
  2    DATAFILE 'usim01.dbf'
  3      SIZE 5G
  4      AUTOEXTEND ON
  5  ;

TABLESPACE USIM_LIVE erstellt.

SQL> -- USIM_TEST
SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN 'USIM_CREATE_TEST_TBL_SPC.sql'
  4           ELSE '../UTIL/NOTHING_TO_DO.sql "Tablespace USIM_TEST already exists."'
  5         END AS SCRIPTFILE
  6    FROM dba_tablespaces
  7   WHERE tablespace_name = 'USIM_TEST'
  8  ;

SCRIPTFILE
----------------------------------------------------------------
USIM_CREATE_TEST_TBL_SPC.sql

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> CREATE TABLESPACE usim_test
  2    DATAFILE 'usim_test01.dbf'
  3      SIZE 100M
  4      AUTOEXTEND ON
  5  ;

TABLESPACE USIM_TEST erstellt.

SQL> -- CREATE CREDENTIALS
SQL> SELECT 'CREATE USIM credentials' AS info FROM dual;

INFO
-----------------------
CREATE USIM credentials

1 Zeile ausgewählt.

SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN 'USIM_CREATE_CREDENTIALS.sql'
  4           WHEN COUNT(*) = 3
  5           THEN '../UTIL/NOTHING_TO_DO.sql "Credentials USIM_OS_ACCESS, USIM_DB_ACCESS and USIM_DB_ACCESS_TEST already exists."'
  6           ELSE '../UTIL/EXIT_SCRIPT_WITH_ERROR.sql "Cleanup failed remove credentials manually before."'
  7         END AS SCRIPTFILE
  8    FROM dba_credentials
  9   WHERE owner = USER
 10     AND credential_name IN ('USIM_OS_ACCESS', 'USIM_DB_ACCESS', 'USIM_DB_ACCESS_TEST')
 11  ;

SCRIPTFILE
--------------------------------------------------------------------------------------------------------------
USIM_CREATE_CREDENTIALS.sql

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> -- create credentials for scheduler jobs running server scripts
SQL> BEGIN
  2    DBMS_CREDENTIAL.CREATE_CREDENTIAL( username => '&USER_OS'
  3                                     , password => '&PASS_OS'
  4                                     , comments => 'OS_ACCESS for server script execution'
  5                                     , credential_name => 'USIM_OS_ACCESS'
  6                                     )
  7    ;
  8    DBMS_CREDENTIAL.CREATE_CREDENTIAL( username => 'USIM'
  9                                     , password => '&PASS_USIM'
 10                                     , comments => 'DB_ACCESS USIM for server script execution'
 11                                     , credential_name => 'USIM_DB_ACCESS'
 12                                     )
 13    ;
 14    DBMS_CREDENTIAL.CREATE_CREDENTIAL( username => 'USIM_TEST'
 15                                     , password => '&PASS_USIM_TEST'
 16                                     , comments => 'DB_ACCESS USIM_TEST for server script execution'
 17                                     , credential_name => 'USIM_DB_ACCESS_TEST'
 18                                     )
 19    ;
 20  END;
 21  /
alt:BEGIN
  DBMS_CREDENTIAL.CREATE_CREDENTIAL( username => '&USER_OS'
                                   , password => '&PASS_OS'
                                   , comments => 'OS_ACCESS for server script execution'
                                   , credential_name => 'USIM_OS_ACCESS'
                                   )
  ;
  DBMS_CREDENTIAL.CREATE_CREDENTIAL( username => 'USIM'
                                   , password => '&PASS_USIM'
                                   , comments => 'DB_ACCESS USIM for server script execution'
                                   , credential_name => 'USIM_DB_ACCESS'
                                   )
  ;
  DBMS_CREDENTIAL.CREATE_CREDENTIAL( username => 'USIM_TEST'
                                   , password => '&PASS_USIM_TEST'
                                   , comments => 'DB_ACCESS USIM_TEST for server script execution'
                                   , credential_name => 'USIM_DB_ACCESS_TEST'
                                   )
  ;
END;

neu:BEGIN
  DBMS_CREDENTIAL.CREATE_CREDENTIAL( username => 'oracle'
                                   , password => 'oracle'
                                   , comments => 'OS_ACCESS for server script execution'
                                   , credential_name => 'USIM_OS_ACCESS'
                                   )
  ;
  DBMS_CREDENTIAL.CREATE_CREDENTIAL( username => 'USIM'
                                   , password => 'usim'
                                   , comments => 'DB_ACCESS USIM for server script execution'
                                   , credential_name => 'USIM_DB_ACCESS'
                                   )
  ;
  DBMS_CREDENTIAL.CREATE_CREDENTIAL( username => 'USIM_TEST'
                                   , password => 'usim'
                                   , comments => 'DB_ACCESS USIM_TEST for server script execution'
                                   , credential_name => 'USIM_DB_ACCESS_TEST'
                                   )
  ;
END;
PL/SQL-Prozedur erfolgreich abgeschlossen.
SQL> -- CREATE DIRECTORY, we expect a proper cleanup, may fail if cleanup failed
SQL> SELECT 'CREATE USIM directories' AS info FROM dual;

INFO
-----------------------
CREATE USIM directories

1 Zeile ausgewählt.

SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN 'USIM_CREATE_DIRECTORIES.sql'
  4           WHEN COUNT(*) = 5
  5           THEN '../UTIL/NOTHING_TO_DO.sql "Directories USIM_DIR, USIM_HIST_DIR, USIM_TEST_DIR and USIM_SCRIPT_DIR already exists."'
  6           ELSE '../UTIL/EXIT_SCRIPT_WITH_ERROR.sql "Cleanup failed remove directories manually before."'
  7         END AS SCRIPTFILE
  8    FROM dba_directories
  9   WHERE directory_name IN ('USIM_DIR', 'USIM_HIST_DIR', 'USIM_SCRIPT_DIR', 'USIM_LOG_DIR', 'USIM_TEST_DIR')
 10  ;

SCRIPTFILE
------------------------------------------------------------------------------------------------------------------
USIM_CREATE_DIRECTORIES.sql

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> -- a new file is always copied to the main directory. Before copying, the current file, if it exists,
SQL> -- is copied to the history directory with a unique name.
SQL> CREATE OR REPLACE DIRECTORY usim_dir AS '&USIM_DIRECTORY';
alt:CREATE OR REPLACE DIRECTORY usim_dir AS '&USIM_DIRECTORY'
neu:CREATE OR REPLACE DIRECTORY usim_dir AS '/opt/oracle/USIM/JS'

Directory USIM_DIR erstellt.

SQL> CREATE OR REPLACE DIRECTORY usim_hist_dir AS '&USIM_HISTORY';
alt:CREATE OR REPLACE DIRECTORY usim_hist_dir AS '&USIM_HISTORY'
neu:CREATE OR REPLACE DIRECTORY usim_hist_dir AS '/opt/oracle/USIM/JS/SpaceLog'

Directory USIM_HIST_DIR erstellt.

SQL> -- script main directory for script runs
SQL> CREATE OR REPLACE DIRECTORY usim_script_dir AS '&USIM_SCRIPTS';
alt:CREATE OR REPLACE DIRECTORY usim_script_dir AS '&USIM_SCRIPTS'
neu:CREATE OR REPLACE DIRECTORY usim_script_dir AS '/opt/oracle/USIM'

Directory USIM_SCRIPT_DIR erstellt.

SQL> -- installation log files
SQL> CREATE OR REPLACE DIRECTORY usim_log_dir AS '&USIM_LOGS';
alt:CREATE OR REPLACE DIRECTORY usim_log_dir AS '&USIM_LOGS'
neu:CREATE OR REPLACE DIRECTORY usim_log_dir AS '/opt/oracle/USIM/SETUP/LOG'

Directory USIM_LOG_DIR erstellt.

SQL> -- test files
SQL> CREATE OR REPLACE DIRECTORY usim_test_dir AS '&USIM_TESTS';
alt:CREATE OR REPLACE DIRECTORY usim_test_dir AS '&USIM_TESTS'
neu:CREATE OR REPLACE DIRECTORY usim_test_dir AS '/opt/oracle/USIM/TESTING'

Directory USIM_TEST_DIR erstellt.

SQL> -- CREATE JOBS, we expect a proper cleanup, may fail if cleanup failed
SQL> SELECT 'CREATE USIM related jobs' AS info FROM dual;

INFO
------------------------
CREATE USIM related jobs

1 Zeile ausgewählt.

SQL> SELECT CASE
  2           WHEN NVL(SUM(installed), 0) = 0
  3           THEN 'USIM_CREATE_JOBS.sql'
  4           WHEN SUM(installed) = 4
  5           THEN '../UTIL/NOTHING_TO_DO.sql "Job USIM_RUN_SERVER_SQL and program USIM_RUN_SQL already exists for live and test."'
  6           ELSE '../UTIL/EXIT_SCRIPT_WITH_ERROR.sql "Cleanup failed remove job and program manually before."'
  7         END AS SCRIPTFILE
  8    FROM (SELECT CASE
  9                   WHEN object_name IN ('USIM_RUN_SERVER_SQL', 'USIM_RUN_SERVER_SQL_TEST')
 10                    AND object_type = 'JOB'
 11                   THEN 1
 12                   WHEN object_name IN ('USIM_RUN_SQL', 'USIM_RUN_SQL_TEST')
 13                    AND object_type = 'PROGRAM'
 14                   THEN 1
 15                   ELSE 0
 16                 END AS installed
 17            FROM dba_objects
 18           WHERE object_name IN ('USIM_RUN_SERVER_SQL', 'USIM_RUN_SERVER_SQL_TEST', 'USIM_RUN_SQL', 'USIM_RUN_SQL_TEST')
 19             AND owner = USER
 20         )
 21  ;

SCRIPTFILE
--------------------------------------------------------------------------------------------------------------
USIM_CREATE_JOBS.sql

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> -- prebuild programs and jobs to create or recreate the schema DDL
SQL> BEGIN
  2    DBMS_SCHEDULER.CREATE_JOB_CLASS( job_class_name => 'USIM_JOBS'
  3                                   , resource_consumer_group => 'SYS_GROUP'
  4                                   , logging_level => DBMS_SCHEDULER.LOGGING_FULL
  5                                   )
  6    ;
  7    DBMS_SCHEDULER.CREATE_PROGRAM( program_name => 'USIM_RUN_SQL'
  8                                 , program_type => 'EXTERNAL_SCRIPT'
  9                                 , program_action => '&USIM_SHELL./run_sql.sh'
 10                                 , number_of_arguments => 3
 11                                 , enabled => FALSE
 12                                 , comments => 'Provide program with parameters to run sql script on server in the correct directory for USIM'
 13                                 )
 14    ;
 15    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL'
 16                                          , argument_position => 1
 17                                          , argument_name => 'SCRIPT_PATH'
 18                                          , argument_type => 'VARCHAR2'
 19                                          , default_value => '&USIM_SETUP'
 20                                          )
 21    ;
 22    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL'
 23                                          , argument_position => 2
 24                                          , argument_name => 'SCRIPT_NAME'
 25                                          , argument_type => 'VARCHAR2'
 26                                          , default_value => 'USIM_SETUP.sql'
 27                                          )
 28    ;
 29    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL'
 30                                          , argument_position => 3
 31                                          , argument_name => 'DB_USER'
 32                                          , argument_type => 'VARCHAR2'
 33                                          , default_value => 'USIM'
 34                                          )
 35    ;
 36    DBMS_SCHEDULER.ENABLE( name => 'USIM_RUN_SQL');
 37    DBMS_SCHEDULER.CREATE_PROGRAM( program_name => 'USIM_RUN_SQL_TEST'
 38                                 , program_type => 'EXTERNAL_SCRIPT'
 39                                 , program_action => '&USIM_SHELL./run_sql.sh'
 40                                 , number_of_arguments => 3
 41                                 , enabled => FALSE
 42                                 , comments => 'Provide program with parameters to run sql script on server in the correct directory for USIM_TEST'
 43                                 )
 44    ;
 45    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL_TEST'
 46                                          , argument_position => 1
 47                                          , argument_name => 'SCRIPT_PATH'
 48                                          , argument_type => 'VARCHAR2'
 49                                          , default_value => '&USIM_SETUP'
 50                                          )
 51    ;
 52    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL_TEST'
 53                                          , argument_position => 2
 54                                          , argument_name => 'SCRIPT_NAME'
 55                                          , argument_type => 'VARCHAR2'
 56                                          , default_value => 'USIM_TEST_SETUP.sql'
 57                                          )
 58    ;
 59    DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL_TEST'
 60                                          , argument_position => 3
 61                                          , argument_name => 'DB_USER'
 62                                          , argument_type => 'VARCHAR2'
 63                                          , default_value => 'USIM_TEST'
 64                                          )
 65    ;
 66    DBMS_SCHEDULER.ENABLE( name => 'USIM_RUN_SQL_TEST');
 67    DBMS_SCHEDULER.CREATE_JOB( job_name => 'USIM_RUN_SERVER_SQL'
 68                             , program_name => 'USIM_RUN_SQL'
 69                             , start_date => NULL
 70                             , repeat_interval => NULL
 71                             , end_date => NULL
 72                             , enabled => FALSE
 73                             , job_class => 'USIM_JOBS'
 74                             , auto_drop => FALSE
 75                             , comments => 'Runs sql scripts on the server for USIM'
 76                             , credential_name => 'USIM_OS_ACCESS'
 77                             , job_style => 'REGULAR'
 78                             );
 79
 80    DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL'
 81                                , attribute => 'store_output'
 82                                , value => TRUE
 83                                )
 84    ;
 85    DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL'
 86                                , attribute => 'logging_level'
 87                                , value => DBMS_SCHEDULER.LOGGING_FULL
 88                                )
 89    ;
 90    DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL'
 91                                , attribute => 'connect_credential_name'
 92                                , value => 'USIM_DB_ACCESS'
 93                                )
 94    ;
 95    DBMS_SCHEDULER.CREATE_JOB( job_name => 'USIM_RUN_SERVER_SQL_TEST'
 96                             , program_name => 'USIM_RUN_SQL_TEST'
 97                             , start_date => NULL
 98                             , repeat_interval => NULL
 99                             , end_date => NULL
100                             , enabled => FALSE
101                             , job_class => 'USIM_JOBS'
102                             , auto_drop => FALSE
103                             , comments => 'Runs sql scripts on the server for USIM_TEST'
104                             , credential_name => 'USIM_OS_ACCESS'
105                             , job_style => 'REGULAR'
106                             )
107    ;
108    DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL_TEST'
109                                , attribute => 'store_output'
110                                , value => TRUE
111                                )
112    ;
113    DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL_TEST'
114                                , attribute => 'logging_level'
115                                , value => DBMS_SCHEDULER.LOGGING_FULL
116                                )
117    ;
118    DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL_TEST'
119                                , attribute => 'connect_credential_name'
120                                , value => 'USIM_DB_ACCESS_TEST'
121                                )
122    ;
123    -- no job enable, runs instantly
124  END;
125  /
alt:BEGIN
  DBMS_SCHEDULER.CREATE_JOB_CLASS( job_class_name => 'USIM_JOBS'
                                 , resource_consumer_group => 'SYS_GROUP'
                                 , logging_level => DBMS_SCHEDULER.LOGGING_FULL
                                 )
  ;
  DBMS_SCHEDULER.CREATE_PROGRAM( program_name => 'USIM_RUN_SQL'
                               , program_type => 'EXTERNAL_SCRIPT'
                               , program_action => '&USIM_SHELL./run_sql.sh'
                               , number_of_arguments => 3
                               , enabled => FALSE
                               , comments => 'Provide program with parameters to run sql script on server in the correct directory for USIM'
                               )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL'
                                        , argument_position => 1
                                        , argument_name => 'SCRIPT_PATH'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => '&USIM_SETUP'
                                        )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL'
                                        , argument_position => 2
                                        , argument_name => 'SCRIPT_NAME'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => 'USIM_SETUP.sql'
                                        )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL'
                                        , argument_position => 3
                                        , argument_name => 'DB_USER'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => 'USIM'
                                        )
  ;
  DBMS_SCHEDULER.ENABLE( name => 'USIM_RUN_SQL');
  DBMS_SCHEDULER.CREATE_PROGRAM( program_name => 'USIM_RUN_SQL_TEST'
                               , program_type => 'EXTERNAL_SCRIPT'
                               , program_action => '&USIM_SHELL./run_sql.sh'
                               , number_of_arguments => 3
                               , enabled => FALSE
                               , comments => 'Provide program with parameters to run sql script on server in the correct directory for USIM_TEST'
                               )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL_TEST'
                                        , argument_position => 1
                                        , argument_name => 'SCRIPT_PATH'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => '&USIM_SETUP'
                                        )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL_TEST'
                                        , argument_position => 2
                                        , argument_name => 'SCRIPT_NAME'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => 'USIM_TEST_SETUP.sql'
                                        )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL_TEST'
                                        , argument_position => 3
                                        , argument_name => 'DB_USER'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => 'USIM_TEST'
                                        )
  ;
  DBMS_SCHEDULER.ENABLE( name => 'USIM_RUN_SQL_TEST');
  DBMS_SCHEDULER.CREATE_JOB( job_name => 'USIM_RUN_SERVER_SQL'
                           , program_name => 'USIM_RUN_SQL'
                           , start_date => NULL
                           , repeat_interval => NULL
                           , end_date => NULL
                           , enabled => FALSE
                           , job_class => 'USIM_JOBS'
                           , auto_drop => FALSE
                           , comments => 'Runs sql scripts on the server for USIM'
                           , credential_name => 'USIM_OS_ACCESS'
                           , job_style => 'REGULAR'
                           );

  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL'
                              , attribute => 'store_output'
                              , value => TRUE
                              )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL'
                              , attribute => 'logging_level'
                              , value => DBMS_SCHEDULER.LOGGING_FULL
                              )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL'
                              , attribute => 'connect_credential_name'
                              , value => 'USIM_DB_ACCESS'
                              )
  ;
  DBMS_SCHEDULER.CREATE_JOB( job_name => 'USIM_RUN_SERVER_SQL_TEST'
                           , program_name => 'USIM_RUN_SQL_TEST'
                           , start_date => NULL
                           , repeat_interval => NULL
                           , end_date => NULL
                           , enabled => FALSE
                           , job_class => 'USIM_JOBS'
                           , auto_drop => FALSE
                           , comments => 'Runs sql scripts on the server for USIM_TEST'
                           , credential_name => 'USIM_OS_ACCESS'
                           , job_style => 'REGULAR'
                           )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL_TEST'
                              , attribute => 'store_output'
                              , value => TRUE
                              )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL_TEST'
                              , attribute => 'logging_level'
                              , value => DBMS_SCHEDULER.LOGGING_FULL
                              )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL_TEST'
                              , attribute => 'connect_credential_name'
                              , value => 'USIM_DB_ACCESS_TEST'
                              )
  ;
  -- no job enable, runs instantly
END;

neu:BEGIN
  DBMS_SCHEDULER.CREATE_JOB_CLASS( job_class_name => 'USIM_JOBS'
                                 , resource_consumer_group => 'SYS_GROUP'
                                 , logging_level => DBMS_SCHEDULER.LOGGING_FULL
                                 )
  ;
  DBMS_SCHEDULER.CREATE_PROGRAM( program_name => 'USIM_RUN_SQL'
                               , program_type => 'EXTERNAL_SCRIPT'
                               , program_action => '/opt/oracle/USIM/SH/run_sql.sh'
                               , number_of_arguments => 3
                               , enabled => FALSE
                               , comments => 'Provide program with parameters to run sql script on server in the correct directory for USIM'
                               )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL'
                                        , argument_position => 1
                                        , argument_name => 'SCRIPT_PATH'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => '/opt/oracle/USIM/SETUP'
                                        )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL'
                                        , argument_position => 2
                                        , argument_name => 'SCRIPT_NAME'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => 'USIM_SETUP.sql'
                                        )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL'
                                        , argument_position => 3
                                        , argument_name => 'DB_USER'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => 'USIM'
                                        )
  ;
  DBMS_SCHEDULER.ENABLE( name => 'USIM_RUN_SQL');
  DBMS_SCHEDULER.CREATE_PROGRAM( program_name => 'USIM_RUN_SQL_TEST'
                               , program_type => 'EXTERNAL_SCRIPT'
                               , program_action => '/opt/oracle/USIM/SH/run_sql.sh'
                               , number_of_arguments => 3
                               , enabled => FALSE
                               , comments => 'Provide program with parameters to run sql script on server in the correct directory for USIM_TEST'
                               )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL_TEST'
                                        , argument_position => 1
                                        , argument_name => 'SCRIPT_PATH'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => '/opt/oracle/USIM/SETUP'
                                        )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL_TEST'
                                        , argument_position => 2
                                        , argument_name => 'SCRIPT_NAME'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => 'USIM_TEST_SETUP.sql'
                                        )
  ;
  DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT( program_name => 'USIM_RUN_SQL_TEST'
                                        , argument_position => 3
                                        , argument_name => 'DB_USER'
                                        , argument_type => 'VARCHAR2'
                                        , default_value => 'USIM_TEST'
                                        )
  ;
  DBMS_SCHEDULER.ENABLE( name => 'USIM_RUN_SQL_TEST');
  DBMS_SCHEDULER.CREATE_JOB( job_name => 'USIM_RUN_SERVER_SQL'
                           , program_name => 'USIM_RUN_SQL'
                           , start_date => NULL
                           , repeat_interval => NULL
                           , end_date => NULL
                           , enabled => FALSE
                           , job_class => 'USIM_JOBS'
                           , auto_drop => FALSE
                           , comments => 'Runs sql scripts on the server for USIM'
                           , credential_name => 'USIM_OS_ACCESS'
                           , job_style => 'REGULAR'
                           );

  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL'
                              , attribute => 'store_output'
                              , value => TRUE
                              )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL'
                              , attribute => 'logging_level'
                              , value => DBMS_SCHEDULER.LOGGING_FULL
                              )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL'
                              , attribute => 'connect_credential_name'
                              , value => 'USIM_DB_ACCESS'
                              )
  ;
  DBMS_SCHEDULER.CREATE_JOB( job_name => 'USIM_RUN_SERVER_SQL_TEST'
                           , program_name => 'USIM_RUN_SQL_TEST'
                           , start_date => NULL
                           , repeat_interval => NULL
                           , end_date => NULL
                           , enabled => FALSE
                           , job_class => 'USIM_JOBS'
                           , auto_drop => FALSE
                           , comments => 'Runs sql scripts on the server for USIM_TEST'
                           , credential_name => 'USIM_OS_ACCESS'
                           , job_style => 'REGULAR'
                           )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL_TEST'
                              , attribute => 'store_output'
                              , value => TRUE
                              )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL_TEST'
                              , attribute => 'logging_level'
                              , value => DBMS_SCHEDULER.LOGGING_FULL
                              )
  ;
  DBMS_SCHEDULER.SET_ATTRIBUTE( name => 'USIM_RUN_SERVER_SQL_TEST'
                              , attribute => 'connect_credential_name'
                              , value => 'USIM_DB_ACCESS_TEST'
                              )
  ;
  -- no job enable, runs instantly
END;
PL/SQL-Prozedur erfolgreich abgeschlossen.
SQL> -- CREATE VIEWS
SQL> SELECT 'CREATE USIM related views' AS info FROM dual;

INFO
-------------------------
CREATE USIM related views

1 Zeile ausgewählt.

SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN '../VIEW/USIM_INSTALL_STATE.sql'
  4           ELSE '../UTIL/NOTHING_TO_DO.sql "View USIM_INSTALL_STATE already exists."'
  5         END AS SCRIPTFILE
  6    FROM dba_objects
  7   WHERE object_name = 'USIM_INSTALL_STATE'
  8     AND object_type = 'VIEW'
  9  ;

SCRIPTFILE
-------------------------------------------------------------------
../VIEW/USIM_INSTALL_STATE.sql

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> -- SYS view granted to manage install state situations, needed by DBA setup
SQL> CREATE OR REPLACE VIEW usim_install_state AS
  2      WITH lst AS
  3           (SELECT CASE
  4                     WHEN SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') = 'USIM'
  5                     -- adjust list if new packages are released
  6                     THEN 'USIM_ERL,USIM_DEBUG,USIM_STATIC,USIM_MATHS,USIM_BASE,USIM_MLV,USIM_POS,USIM_DIM,USIM_SPR,USIM_DBIF,USIM_CREATOR,USIM_PROCESS,USIM_NOD,USIM_RMD,USIM_SPC,USIM_CHI,USIM_SPO,USIM_APEX'
  7                     ELSE 'USIM_ERL,USIM_DEBUG,USIM_STATIC,USIM_MATHS,USIM_BASE,USIM_MLV,USIM_POS,USIM_DIM,USIM_SPR,USIM_DBIF,USIM_CREATOR,USIM_PROCESS,USIM_NOD,USIM_RMD,USIM_SPC,USIM_CHI,USIM_SPO,USIM_APEX,USIM_TEST'
  8                   END AS object_list
  9                   -- adjust expected count if new packages are released
 10                 , CASE
 11                     WHEN SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') = 'USIM' THEN 36
 12                     WHEN SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') = 'USIM_TEST' THEN 38
 13                     ELSE -1
 14                   END AS cnt_expected
 15                 , CASE
 16                     WHEN SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') = 'USIM' THEN 0
 17                     WHEN SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') = 'USIM_TEST' THEN 1
 18                     ELSE -1
 19                   END AS is_test_env
 20              FROM dual
 21           )
 22         , obj AS
 23           (SELECT COUNT(*) AS cnt_objects
 24              FROM all_objects
 25              LEFT OUTER JOIN lst ON 1 = 1
 26             WHERE owner = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')
 27               AND INSTR(lst.object_list, all_objects.object_name) > 0
 28           )
 29         , val AS
 30           (SELECT COUNT(CASE WHEN status = 'VALID' THEN 1 END) AS cnt_valid
 31                 , COUNT(CASE WHEN status != 'VALID' THEN 1 END) AS cnt_invalid
 32              FROM all_objects
 33                   -- exclude synonyms from SYS
 34             WHERE owner = SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA')
 35               AND object_type != 'SYNONYM'
 36           )
 37    SELECT CASE
 38             WHEN SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') IN ('USIM', 'USIM_TEST')
 39             THEN CASE
 40                    WHEN SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') = 'USIM'
 41                    THEN CASE
 42                           WHEN obj.cnt_objects = lst.cnt_expected
 43                            AND val.cnt_invalid = 0
 44                            AND val.cnt_valid  != 0
 45                           THEN 1
 46                           WHEN obj.cnt_objects  = lst.cnt_expected
 47                            AND val.cnt_invalid != 0
 48                            AND val.cnt_valid   != 0
 49                           THEN -10
 50                           WHEN obj.cnt_objects != lst.cnt_expected
 51                            AND val.cnt_invalid != 0
 52                            AND val.cnt_valid   != 0
 53                           THEN -11
 54                           WHEN obj.cnt_objects != lst.cnt_expected
 55                            AND val.cnt_invalid  = 0
 56                            AND val.cnt_valid   != 0
 57                           THEN -12
 58                           ELSE 0
 59                         END
 60                    ELSE CASE
 61                           WHEN obj.cnt_objects = lst.cnt_expected
 62                            AND val.cnt_invalid = 0
 63                            AND val.cnt_valid  != 0
 64                           THEN 2
 65                           WHEN obj.cnt_objects = lst.cnt_expected
 66                            AND val.cnt_invalid != 0
 67                            AND val.cnt_valid   != 0
 68                           THEN -20
 69                           WHEN obj.cnt_objects != lst.cnt_expected
 70                            AND val.cnt_invalid != 0
 71                            AND val.cnt_valid   != 0
 72                           THEN -21
 73                           WHEN obj.cnt_objects != lst.cnt_expected
 74                            AND val.cnt_invalid  = 0
 75                            AND val.cnt_valid   != 0
 76                           THEN -22
 77                           ELSE 0
 78                         END
 79                  END
 80             ELSE -99
 81           END AS status
 82         , CASE
 83             WHEN SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') IN ('USIM', 'USIM_TEST')
 84             THEN CASE
 85                    WHEN SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') = 'USIM'
 86                    THEN CASE
 87                           WHEN obj.cnt_objects = lst.cnt_expected
 88                            AND val.cnt_invalid = 0
 89                            AND val.cnt_valid  != 0
 90                           THEN 'USim system installed and valid'
 91                           WHEN obj.cnt_objects  = lst.cnt_expected
 92                            AND val.cnt_invalid != 0
 93                            AND val.cnt_valid   != 0
 94                           THEN 'Invalid objects found in USim system, objects complete'
 95                           WHEN obj.cnt_objects != lst.cnt_expected
 96                            AND val.cnt_invalid != 0
 97                            AND val.cnt_valid   != 0
 98                           THEN 'Invalid and missing objects found in USim system'
 99                           WHEN obj.cnt_objects != lst.cnt_expected
100                            AND val.cnt_invalid  = 0
101                            AND val.cnt_valid   != 0
102                           THEN 'Missing objects found in USim system, all objects valid'
103                           ELSE 'No USim system installed yet'
104                         END
105                    ELSE CASE
106                           WHEN obj.cnt_objects = lst.cnt_expected
107                            AND val.cnt_invalid = 0
108                            AND val.cnt_valid  != 0
109                           THEN 'USim test system installed and valid'
110                           WHEN obj.cnt_objects = lst.cnt_expected
111                            AND val.cnt_invalid != 0
112                            AND val.cnt_valid   != 0
113                           THEN 'Invalid objects found in USim test system, objects complete'
114                           WHEN obj.cnt_objects != lst.cnt_expected
115                            AND val.cnt_invalid != 0
116                            AND val.cnt_valid   != 0
117                           THEN 'Invalid and missing objects found in USim test system'
118                           WHEN obj.cnt_objects != lst.cnt_expected
119                            AND val.cnt_invalid  = 0
120                            AND val.cnt_valid   != 0
121                           THEN 'Missing objects found in USim test system, all objects valid'
122                           ELSE 'No USIM test system installed yet'
123                         END
124                  END
125             ELSE 'Not a USim system'
126           END AS status_txt
127         , lst.is_test_env
128         , CASE WHEN lst.is_test_env = 1 THEN 'USim Test Environment' ELSE 'USim Live Environment' END AS is_test_env_txt
129         , lst.cnt_expected
130         , obj.cnt_objects
131         , val.cnt_invalid
132         , val.cnt_valid
133         , USER AS view_user
134         , SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') AS current_schema
135         , SYS_CONTEXT('USERENV', 'CURRENT_USER') AS current_user
136         , SYS_CONTEXT('USERENV', 'OS_USER') AS os_user
137      FROM obj
138      LEFT OUTER JOIN val ON 1 = 1
139      LEFT OUTER JOIN lst ON 1 = 1
140  ;

View USIM_INSTALL_STATE erstellt.

SQL> -- CREATE PACKAGES
SQL> SELECT 'CREATE USIM related packages' AS info FROM dual;

INFO
----------------------------
CREATE USIM related packages

1 Zeile ausgewählt.

SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN '../PACKAGES/USIM_SYS_UTIL.pks'
  4           ELSE '../UTIL/NOTHING_TO_DO.sql "USIM_SYS_UTIL package header already exists."'
  5         END AS SCRIPTFILE
  6    FROM dba_objects
  7   WHERE object_name = 'USIM_SYS_UTIL'
  8     AND object_type = 'PACKAGE'
  9     AND owner       = USER
 10  ;

SCRIPTFILE
------------------------------------------------------------------------
../PACKAGES/USIM_SYS_UTIL.pks

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> CREATE OR REPLACE PACKAGE usim_sys_util
  2  IS
  3    /* Interface package for DBA activities needed for USIM and APEX. */
  4
  5    --== package variable definition ==--
  6    -- default schema fixed, change if needed
  7    PROD_SCHEMA CONSTANT CHAR(4) := 'USIM';
  8    -- test schema fixed, change if needed
  9    TEST_SCHEMA CONSTANT CHAR(9) := 'USIM_TEST';
 10
 11    /**
 12    * Starts the scheduler job to run a given script or recreate of the schema. If script is not
 13    * given the setup scripts are run that recreate the schema. No checks are done on the given
 14    * script so it may fail on execution. Reserved by SYS. Timeout has to be controlled by provided
 15    * procedures granted to USIM users.
 16    * @param p_job_name Mandatory. The job to run, e.g. RUN_SERVER_SQL or RUN_SERVER_SQL_TEST.
 17    * @param p_script Either NULL or a valid file name including extension that exists on the database server.
 18    * @param p_path Either NULL or a valid path that exists on the database server.
 19    */
 20    PROCEDURE run_script( p_job_name IN VARCHAR2
 21                        , p_script   IN VARCHAR2 DEFAULT NULL
 22                        , p_path     IN VARCHAR2 DEFAULT NULL
 23                        )
 24    ;
 25
 26    /**
 27    * Wrapper for USIM_RUN_SCRIPT to run setup for USIM main user. Setup will drop also all existing objects of USIM.
 28    * The finished state is detected by the scheduler log entry. Status can be FAILED or SUCCEEDED. There is an overall
 29    * timeout of 8 hours, scripts called should not take longer.
 30    * @param p_caller The schema to use, APEX should submit '#OWNER#' as parameter.
 31    * @param p_timeout The timeout for waiting to finish job in minutes, if NULL (default) wait until finished.
 32    */
 33    PROCEDURE run_recreate( p_caller   IN VARCHAR2
 34                          , p_timeout  IN NUMBER DEFAULT NULL
 35                          )
 36    ;
 37
 38    /**
 39    * Wrapper for USIM_RUN_SCRIPT to run test scripts for USIM_TEST main user.
 40    * @param p_script The name of the test script file. Default is USIM_TESTS.sql.
 41    */
 42    PROCEDURE run_test(p_script_name IN VARCHAR2 DEFAULT 'USIM_TESTS.sql');
 43
 44    /**
 45    * Determines a file type in sense of CRLF, LF, CR by analyzing the file until first
 46    * occurrence of LF or CR possibly followed by LF (not true for Mac). Only Windows must
 47    * be handled, if client and server differs. Mac and Unix environments are equal in handling
 48    * line end terminators. Windows clients with unix servers reading files created by server
 49    * will not display correctly linefeeds. So CR has to be added only in this situation.
 50    * @param p_filename The name of the file to inspect.
 51    * @param p_directory The Oracle directory that points to the folder the file is saved.
 52    * @return The file type as text, LF, CRLF, CR or error information.
 53    */
 54    FUNCTION usim_filetype( p_filename  IN VARCHAR2
 55                          , p_directory IN VARCHAR2 DEFAULT 'USIM_LOG_DIR'
 56                          )
 57      RETURN VARCHAR2
 58    ;
 59
 60    /**
 61    * Transforms a user agent web site string to a platform string. Not in sense of browser old platform strings.
 62    * In the sense of USIM usage, the platform string is only relevant if Windows is used as client system. Identifying
 63    * only WIN may not be sufficient for user agent strings. Will search for WINDOWS without any version number.
 64    * @param p_user_agent The string provided by the client as USER AGENT.
 65    * @return The platform indentification, either WINDOWS or OTHERS. Smartphone OS is not handled or tested.
 66    */
 67    FUNCTION agent_to_platform(p_user_agent IN VARCHAR2)
 68      RETURN VARCHAR2
 69    ;
 70
 71    /**
 72    * Read logs from disk. Expect SQL logs with max. linesize 9999 set. Needs to consider that DBA files are probably created on
 73    * windows and APEX runs as well mostly under windows. May only work with Windows Client and OVA server.
 74    * If log file is unix type and client is windows the new line is corrected to CRLF.
 75    * @param p_filename The name of the log file that resides in the given directory, e.g. USIM_SETUP.log.
 76    * @param p_platform The client platform used. Default is Win32. Useful if enviroments server/client differ to display logs correctly.
 77    * May also be USER AGENT string. Searched for the upper case string WIN to match.
 78    * @param p_directory The name of a valid directory for logs. Default is USIM_LOG_DIR.
 79    * @return A CLOB containing either the file content or the error message why file could not be loaded.
 80    */
 81    FUNCTION load_log( p_filename  IN VARCHAR2
 82                     , p_platform  IN VARCHAR2 DEFAULT 'Win32'
 83                     , p_directory IN VARCHAR2 DEFAULT 'USIM_LOG_DIR'
 84                     )
 85      RETURN CLOB
 86    ;
 87
 88    /**
 89    * Returns current version informations from V$VERSION and V$INSTANCE.
 90    * @return The version string and number for the current installed oracle version.
 91    */
 92    FUNCTION ora_version
 93      RETURN VARCHAR2
 94    ;
 95
 96    /**
 97    * Determines limitations on use of Oracle Free or XE versions.
 98    * @return 0 if enterprise or standard version, 1 if free or XE version with limited size.
 99    */
100    FUNCTION is_oracle_limited
101      RETURN NUMBER
102    ;
103
104  END usim_sys_util;
105  /

Package USIM_SYS_UTIL kompiliert

SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN '../PACKAGES/USIM_SYS_UTIL.pkb'
  4           ELSE '../UTIL/NOTHING_TO_DO.sql "USIM_SYS_UTIL package body already exists."'
  5         END AS SCRIPTFILE
  6    FROM dba_objects
  7   WHERE object_name = 'USIM_SYS_UTIL'
  8     AND object_type = 'PACKAGE BODY'
  9     AND owner       = USER
 10  ;

SCRIPTFILE
----------------------------------------------------------------------
../PACKAGES/USIM_SYS_UTIL.pkb

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> CREATE OR REPLACE PACKAGE BODY usim_sys_util
  2  IS
  3    -- see header for documentation
  4
  5    PROCEDURE run_script( p_job_name IN VARCHAR2
  6                        , p_script   IN VARCHAR2 DEFAULT NULL
  7                        , p_path     IN VARCHAR2 DEFAULT NULL
  8                        )
  9    IS
 10    BEGIN
 11      IF p_script IS NOT NULL
 12      THEN
 13        -- set parameter
 14        DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE( job_name       => p_job_name
 15                                             , argument_name  => 'SCRIPT_NAME'
 16                                             , argument_value => p_script
 17                                             )
 18        ;
 19      END IF;
 20      IF p_path IS NOT NULL
 21      THEN
 22        -- set parameter
 23        DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE( job_name       => p_job_name
 24                                             , argument_name  => 'SCRIPT_PATH'
 25                                             , argument_value => p_path
 26                                             )
 27        ;
 28      END IF;
 29      -- run job once
 30      DBMS_SCHEDULER.RUN_JOB(job_name => p_job_name);
 31    END run_script;
 32
 33    PROCEDURE run_recreate( p_caller   IN VARCHAR2
 34                          , p_timeout  IN NUMBER DEFAULT NULL
 35                          )
 36    IS
 37      l_job_name        VARCHAR2(128);
 38      l_package         VARCHAR2(128);
 39      l_startdate       TIMESTAMP;
 40      l_enddate         TIMESTAMP;
 41      l_is_done         INTEGER;
 42      l_is_schema_done  INTEGER;
 43      l_status_old      NUMBER;
 44      l_status_new      NUMBER;
 45      CURSOR cur_done( cp_startdate IN TIMESTAMP
 46                     , cp_job_name  IN VARCHAR2
 47                     )
 48      IS
 49        SELECT COUNT(*) AS is_done
 50          FROM dba_scheduler_job_log
 51         WHERE job_name  = cp_job_name
 52           AND operation = 'RUN'
 53           AND status   IN ('SUCCEEDED', 'FAILED')
 54           AND log_date  > cp_startdate
 55      ;
 56      -- end of install by last object installed, should be USIM_APEX or USIM_TEST package
 57      CURSOR cur_schema_done( cp_owner    IN VARCHAR2
 58                            , cp_package  IN VARCHAR2
 59                            )
 60      IS
 61        SELECT COUNT(*)
 62          FROM dba_objects
 63         WHERE owner        = cp_owner
 64           AND object_name  = cp_package
 65           AND object_type  = 'PACKAGE BODY'
 66      ;
 67    BEGIN
 68      -- check caller
 69      IF p_caller NOT IN (usim_sys_util.PROD_SCHEMA, usim_sys_util.TEST_SCHEMA)
 70      THEN
 71        -- do not anything if caller is not USIM or USIM_TEST
 72        RETURN;
 73      ELSE
 74        IF p_caller = usim_sys_util.PROD_SCHEMA
 75        THEN
 76          l_job_name := 'USIM_RUN_SERVER_SQL';
 77          l_package  := 'USIM_APEX';
 78        ELSE
 79          l_job_name := 'USIM_RUN_SERVER_SQL_TEST';
 80          l_package  := 'USIM_TEST';
 81        END IF;
 82      END IF;
 83      l_startdate := SYSTIMESTAMP;
 84      SELECT status
 85        INTO l_status_old
 86        FROM usim_install_state
 87      ;
 88      run_script(p_job_name  => l_job_name);
 89      -- only positive numbers
 90      IF NVL(p_timeout, 0) > 0
 91      THEN
 92        l_enddate := l_startdate + (INTERVAL '1' MINUTE * p_timeout);
 93      ELSE
 94        -- overall timeout
 95        l_enddate := l_startdate + INTERVAL '8' HOUR;
 96      END IF;
 97      -- loop until state is changing to get beginning of external job execution
 98      -- no sleep as things should change fast, but timeout anyway
 99      LOOP
100        SELECT status
101          INTO l_status_new
102          FROM usim_install_state
103        ;
104        EXIT WHEN l_status_old != l_status_new OR SYSTIMESTAMP > l_enddate;
105      END LOOP;
106      -- loop until done or timeout
107      LOOP
108        l_is_done := 0;
109        l_is_schema_done := 0;
110        OPEN cur_done(l_startdate, l_job_name);
111        FETCH cur_done INTO l_is_done;
112        CLOSE cur_done;
113        OPEN cur_schema_done(p_caller, l_package);
114        FETCH cur_schema_done INTO l_is_schema_done;
115        CLOSE cur_schema_done;
116        EXIT WHEN (l_is_done > 0 AND l_is_schema_done > 0) OR SYSTIMESTAMP > l_enddate;
117        DBMS_SESSION.SLEEP(5);
118      END LOOP;
119    END run_recreate;
120
121    PROCEDURE run_test(p_script_name IN VARCHAR2 DEFAULT 'USIM_TESTS.sql')
122    IS
123      l_path VARCHAR2(4000);
124    BEGIN
125      SELECT directory_path
126        INTO l_path
127        FROM dba_directories
128       WHERE directory_name = 'USIM_TEST_DIR'
129      ;
130      run_script( p_job_name  => 'USIM_RUN_SERVER_SQL_TEST'
131                , p_script    => NVL(p_script_name, 'USIM_TESTS.sql')
132                , p_path      => l_path
133                )
134      ;
135    END run_test;
136
137    FUNCTION usim_filetype( p_filename  IN VARCHAR2
138                          , p_directory IN VARCHAR2 DEFAULT 'USIM_LOG_DIR'
139                          )
140      RETURN VARCHAR2
141    IS
142      l_file        UTL_FILE.FILE_TYPE;
143      -- minimum raw buffer is 512
144      l_buffer      RAW(512);
145      l_bufsize     CONSTANT PLS_INTEGER := 512;
146      l_lf          RAW(1);
147      l_cr          RAW(1);
148      l_line        INTEGER;
149      l_type        VARCHAR2(2000);
150    BEGIN
151      l_type := 'ERROR';
152      l_line := -3;
153      l_lf   := utl_raw.cast_to_raw(CHR(10));
154      l_line := -2;
155      l_cr   := utl_raw.cast_to_raw(CHR(13));
156      l_line := -1;
157      l_file := UTL_FILE.FOPEN(p_directory, p_filename, 'r', l_bufsize);
158      l_line := 0;
159      LOOP
160        -- loop as long as needed to find first line end
161        BEGIN
162          l_line := l_line +1;
163          UTL_FILE.GET_RAW(l_file, l_buffer, l_bufsize);
164          -- loop char by char through buffer
165          FOR l_idx IN 1..l_bufsize
166          LOOP
167            IF utl_raw.SUBSTR(l_buffer, l_idx, 1) = l_cr
168            THEN
169                -- first found CR, checkout if Windows or Mac
170                IF utl_raw.SUBSTR(l_buffer, l_idx + 1, 1) = l_lf
171                THEN
172                  l_type := 'CRLF';
173                ELSE
174                  l_type := 'CR';
175                END IF;
176                EXIT;
177            END IF;
178            IF utl_raw.SUBSTR(l_buffer, l_idx, 1) = l_lf
179            THEN
180                -- first found LF, so UNIX style
181                l_type := 'LF';
182                EXIT;
183            END IF;
184          END LOOP;
185        EXCEPTION
186          WHEN NO_DATA_FOUND THEN
187            -- read until end if needed: no data found and no line end delimiter found
188            l_type := 'ERROR no CR or LF found in ' || p_filename|| ' directory: ' || p_directory;
189            EXIT;
190        END;
191        EXIT WHEN l_type != 'ERROR';
192      END LOOP;
193      UTL_FILE.FCLOSE(l_file);
194      RETURN l_type;
195    EXCEPTION
196      WHEN OTHERS THEN
197        RETURN 'Error USIM_FILETYPE filename: ' || p_filename || ' directory: ' || p_directory || ' line: ' || l_line || ' ' || SQLERRM;
198    END usim_filetype;
199
200    FUNCTION agent_to_platform(p_user_agent IN VARCHAR2)
201      RETURN VARCHAR2
202    IS
203      l_return VARCHAR2(10);
204    BEGIN
205      IF INSTR(UPPER(p_user_agent), 'WINDOWS') > 0
206      THEN
207        l_return := 'WINDOWS';
208      ELSE
209        l_return := 'OTHERS';
210      END IF;
211      RETURN l_return;
212    END agent_to_platform;
213
214    FUNCTION load_log( p_filename  IN VARCHAR2
215                     , p_platform  IN VARCHAR2 DEFAULT 'Win32'
216                     , p_directory IN VARCHAR2 DEFAULT 'USIM_LOG_DIR'
217                     )
218      RETURN CLOB
219    IS
220      l_clob        CLOB;
221      l_file        UTL_FILE.FILE_TYPE;
222      l_buffer      VARCHAR2(10024);
223      l_bufsize     CONSTANT PLS_INTEGER := 10024;
224      l_crlf        VARCHAR2(2) := CHR(13) || CHR(10);
225      l_lf          VARCHAR2(1) := CHR(10);
226      l_buffer_crlf VARCHAR(32000);
227      l_line        INTEGER;
228      l_filetype    VARCHAR2(2000);
229      l_system      VARCHAR2(128);
230    BEGIN
231      IF INSTR(UPPER(p_platform), 'WIN') > 0
232      THEN
233        l_system := 'WINDOWS';
234      ELSE
235        l_system := 'OTHERS';
236      END IF;
237      l_line := -3;
238      l_filetype := usim_filetype(p_filename, p_directory);
239      IF INSTR(UPPER(l_filetype), 'ERROR') > 0
240      THEN
241        RETURN 'ERROR USIM_LOAD_LOG checking file type: ' || l_filetype;
242      END IF;
243      l_line := -2;
244      l_file := UTL_FILE.FOPEN(p_directory, p_filename, 'r', l_bufsize);
245      l_line := -1;
246      DBMS_LOB.CREATETEMPORARY(l_clob, TRUE, DBMS_LOB.CALL);
247      l_line := 0;
248      LOOP
249        BEGIN
250          l_line := l_line +1;
251          UTL_FILE.GET_LINE(l_file, l_buffer);
252          -- empty buffers through different lf/crlf settings cause errors if running APEX on windows.
253          IF l_buffer IS NULL
254          THEN
255            IF l_filetype != 'CRLF' AND l_system = 'WINDOWS'
256            THEN
257              l_buffer_crlf := l_crlf;
258            ELSE
259              l_buffer_crlf := l_lf;
260            END IF;
261          ELSE
262            IF l_filetype != 'CRLF' AND l_system = 'WINDOWS'
263            THEN
264              l_buffer_crlf := RTRIM(REPLACE(l_buffer, l_lf, l_crlf)) || l_crlf;
265            ELSE
266              l_buffer_crlf := RTRIM(l_buffer);
267            END IF;
268          END IF;
269          DBMS_LOB.WRITEAPPEND(l_clob, LENGTH(l_buffer_crlf), l_buffer_crlf);
270        EXCEPTION
271          WHEN NO_DATA_FOUND THEN
272            -- read until end: no data found
273            EXIT;
274        END;
275      END LOOP;
276      UTL_FILE.FCLOSE(l_file);
277      -- add debug information on file
278      l_buffer_crlf := 'File type: ' || l_filetype || ' client platform: ' || l_system || ' platform parameter: ' || p_platform;
279      DBMS_LOB.WRITEAPPEND(l_clob, LENGTH(l_buffer_crlf), l_buffer_crlf);
280      RETURN l_clob;
281    EXCEPTION
282      WHEN OTHERS THEN
283        l_clob := 'Error USIM_LOAD_LOG filename: ' || p_filename || ' directory: ' || p_directory || ' line: ' || l_line || ' ' || SQLERRM;
284        RETURN l_clob;
285    END load_log;
286
287    FUNCTION ora_version
288      RETURN VARCHAR2
289    IS
290      l_version VARCHAR2(2000);
291    BEGIN
292      SELECT banner_full
293        INTO l_version
294        FROM v$version
295      ;
296      RETURN l_version;
297    END ora_version
298    ;
299
300    FUNCTION is_oracle_limited
301      RETURN NUMBER
302    IS
303      l_result NUMBER;
304    BEGIN
305      SELECT CASE
306               WHEN (   UPPER(banner_full) LIKE '%STANDARD%'
307                     OR UPPER(banner_full) LIKE '%ENTERPRISE%'
308                    )
309                AND (   UPPER(banner_full) NOT LIKE '% FREE %'
310                     OR UPPER(banner_full) NOT LIKE '% XE %'
311                    )
312               THEN 0
313               ELSE 1
314             END
315        INTO l_result
316        FROM v$version
317      ;
318      RETURN l_result;
319    END is_oracle_limited
320    ;
321
322  END usim_sys_util;
323  /

Package Body USIM_SYS_UTIL kompiliert

SQL> -- CREATE PUBLIC SYNONYMS
SQL> SELECT 'CREATE USIM related public synonyms' AS info FROM dual;

INFO
-----------------------------------
CREATE USIM related public synonyms

1 Zeile ausgewählt.

SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN 'USIM_PUBLIC_SYNONYMS.sql'
  4           WHEN COUNT(*) = 2
  5           THEN '../UTIL/NOTHING_TO_DO.sql "Public synonyms already exists."'
  6           ELSE '../UTIL/EXIT_SCRIPT_WITH_ERROR.sql "Cleanup failed remove public synonyms manually before."'
  7         END AS SCRIPTFILE
  8    FROM dba_objects
  9   WHERE owner        = 'PUBLIC'
 10     AND object_type  = 'SYNONYM'
 11     AND object_name IN ('USIM_INSTALL_STATE', 'USIM_SYS_UTIL')
 12  ;

SCRIPTFILE
-------------------------------------------------------------------------------------------
USIM_PUBLIC_SYNONYMS.sql

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> CREATE PUBLIC SYNONYM usim_install_state FOR usim_install_state;

SYNONYM USIM_INSTALL_STATE erstellt.

SQL> CREATE PUBLIC SYNONYM usim_sys_util FOR usim_sys_util;

SYNONYM USIM_SYS_UTIL erstellt.

SQL> -- CREATE USERS
SQL> SELECT 'CREATE USIM users' AS info FROM dual;

INFO
-----------------
CREATE USIM users

1 Zeile ausgewählt.

SQL> -- USIM
SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN 'USIM_CREATE_USER.sql'
  4           ELSE '../UTIL/NOTHING_TO_DO.sql "User USIM already exists."'
  5         END AS SCRIPTFILE
  6    FROM dba_users
  7   WHERE username = 'USIM'
  8  ;

SCRIPTFILE
-----------------------------------------------------
USIM_CREATE_USER.sql

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> CREATE USER usim IDENTIFIED BY &PASS_USIM;
alt:CREATE USER usim IDENTIFIED BY &PASS_USIM
neu:CREATE USER usim IDENTIFIED BY usim

User USIM erstellt.

SQL> ALTER USER usim
  2  DEFAULT TABLESPACE usim_live
  3  ACCOUNT UNLOCK;

User USIM geändert.

SQL> -- QUOTAS
SQL> ALTER USER usim QUOTA UNLIMITED ON usim_live;

User USIM geändert.

SQL> -- ROLES
SQL> -- basic roles
SQL> GRANT GATHER_SYSTEM_STATISTICS, CONNECT, RESOURCE TO usim;

Grant erfolgreich.

SQL> -- privileges
SQL> GRANT CREATE VIEW TO usim;

Grant erfolgreich.

SQL> GRANT ALL ON DIRECTORY usim_dir TO usim;

Grant erfolgreich.

SQL> GRANT ALL ON DIRECTORY usim_hist_dir TO usim;

Grant erfolgreich.

SQL> GRANT ALL ON DIRECTORY usim_log_dir TO usim;

Grant erfolgreich.

SQL> GRANT ALL ON DIRECTORY usim_script_dir TO usim;

Grant erfolgreich.

SQL> GRANT EXECUTE ON UTL_FILE to usim;

Grant erfolgreich.

SQL> GRANT EXECUTE ON DBMS_LOB to usim;

Grant erfolgreich.

SQL> GRANT MANAGE SCHEDULER TO usim;

Grant erfolgreich.

SQL> GRANT CREATE EXTERNAL JOB TO usim;

Grant erfolgreich.

SQL> GRANT EXECUTE ANY PROGRAM TO usim;

Grant erfolgreich.

SQL> GRANT ALL ON usim_os_access TO usim;

Grant erfolgreich.

SQL> GRANT ALL ON usim_db_access TO usim;

Grant erfolgreich.

SQL> GRANT ALL ON usim_install_state TO usim;

Grant erfolgreich.

SQL> GRANT ALL ON usim_sys_util TO usim;

Grant erfolgreich.

SQL> -- USIM_TEST
SQL> SELECT CASE
  2           WHEN COUNT(*) = 0
  3           THEN 'USIM_CREATE_TESTUSER.sql'
  4           ELSE '../UTIL/NOTHING_TO_DO.sql "User USIM_TEST already exists."'
  5         END AS SCRIPTFILE
  6    FROM dba_users
  7   WHERE username = 'USIM_TEST'
  8  ;

SCRIPTFILE
----------------------------------------------------------
USIM_CREATE_TESTUSER.sql

1 Zeile ausgewählt.

SQL> @@&SCRIPTFILE
SQL> CREATE USER usim_test IDENTIFIED BY &PASS_USIM_TEST;
alt:CREATE USER usim_test IDENTIFIED BY &PASS_USIM_TEST
neu:CREATE USER usim_test IDENTIFIED BY usim

User USIM_TEST erstellt.

SQL>
SQL> ALTER USER usim_test
  2  DEFAULT TABLESPACE usim_test
  3  ACCOUNT UNLOCK;

User USIM_TEST geändert.

SQL>
SQL> -- QUOTAS
SQL> ALTER USER usim_test QUOTA UNLIMITED ON usim_test;

User USIM_TEST geändert.

SQL>
SQL> -- ROLES
SQL> -- basic roles
SQL> GRANT GATHER_SYSTEM_STATISTICS, CONNECT, RESOURCE TO usim_test;

Grant erfolgreich.

SQL>
SQL> -- privileges
SQL> GRANT CREATE VIEW TO usim_test;

Grant erfolgreich.

SQL> GRANT ALL ON DIRECTORY usim_dir TO usim_test;

Grant erfolgreich.

SQL> GRANT ALL ON DIRECTORY usim_hist_dir TO usim_test;

Grant erfolgreich.

SQL> GRANT ALL ON DIRECTORY usim_script_dir TO usim_test;

Grant erfolgreich.

SQL> GRANT ALL ON DIRECTORY usim_log_dir TO usim_test;

Grant erfolgreich.

SQL> GRANT ALL ON DIRECTORY usim_test_dir TO usim_test;

Grant erfolgreich.

SQL> GRANT EXECUTE ON UTL_FILE to usim_test;

Grant erfolgreich.

SQL> GRANT EXECUTE ON DBMS_LOB to usim_test;

Grant erfolgreich.

SQL> GRANT MANAGE SCHEDULER TO usim_test;

Grant erfolgreich.

SQL> GRANT CREATE EXTERNAL JOB TO usim_test;

Grant erfolgreich.

SQL> GRANT EXECUTE ANY PROGRAM TO usim_test;

Grant erfolgreich.

SQL> GRANT ALL ON usim_os_access TO usim_test;

Grant erfolgreich.

SQL> GRANT ALL ON usim_db_access_test TO usim_test;

Grant erfolgreich.

SQL> GRANT ALL ON usim_install_state TO usim_test;

Grant erfolgreich.

SQL> GRANT ALL ON usim_sys_util TO usim_test;

Grant erfolgreich.

SQL> SELECT owner, object_name, object_type, status FROM dba_objects WHERE status != 'VALID';

0 Zeilen ausgewählt.

SQL> SPOOL OFF
